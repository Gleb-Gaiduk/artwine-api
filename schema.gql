# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Address {
  city: String!
  country: String!
  createdAt: DateTime!
  flatNumber: String
  homeNumber: String!
  id: ID!
  postalIndex: String!
  street: String!
  updatedAt: DateTime!
  user: User!
  userId: Float!
}

input AuthUserInput {
  email: String!
  password: String!
}

input CreateAddressInput {
  city: String!
  country: String!
  flatNumber: String
  homeNumber: String!
  postalIndex: String!
  street: String!
  userId: Float!
}

input CreateCategoryInput {
  category: String!
}

input CreateDeliveryInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input CreateOrderInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input CreateOrderStatusInput {
  description: String!
  title: String!
}

input CreatePackageInput {
  imagePath: String!
  price: Float!
  title: String!
  type: String!
}

input CreateProductInput {
  category: String!
  description: String!
  imagePath: String!
  price: Float!
  properties: [PropertyForProductInput!]!
  title: String!
}

input CreateRoleInput {
  description: String!
  title: UserRoles!
}

input CreateUserInput {
  email: String!
  firstName: String!
  lastName: String
  password: String!
  phone: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Delivery {
  address: Address!
  id: ID!
  order: Order!
  status: OrderStatus!
}

input EditRoleInput {
  roles: [UserRoles!]!
  userId: Float!
}

input EntityQueryInput {
  filters: FiltersExpressionInput
  pagination: PaginationOptionsInput
  search: SearchQueryInput
  sort: SortOptionsInput
}

input FilterInput {
  field: String!
  operation: FilterOperation!
  relationField: String
  values: [String!]!
}

enum FilterOperation {
  EQ
  GE
  GT
  IN
  LE
  LIKE
  LT
  NE
}

enum FilterOperator {
  AND
  OR
}

input FiltersExpressionInput {
  childExpressions: [FiltersExpressionInput!]
  filters: [FilterInput!]
  operator: FilterOperator!
}

type Mutation {
  assignRole(assignRoleInput: EditRoleInput!): RolesForUser!
  createAddress(createAddressInput: CreateAddressInput!): Address!
  createDelivery(createDeliveryInput: CreateDeliveryInput!): Delivery!
  createOrder(createOrderInput: CreateOrderInput!): Order!
  createOrderStatus(createOrderStatusInput: CreateOrderStatusInput!): OrderStatus!
  createPackage(createPackageInput: CreatePackageInput!): Package!
  createProduct(createProductInput: CreateProductInput!): Product!
  createProductCategory(createCategoryInput: CreateCategoryInput!): ProductCategory!
  createRole(createRoleInput: CreateRoleInput!): Role!
  createUser(createUserInput: CreateUserInput!): UserWithTokens!
  login(authUserInput: AuthUserInput!): UserWithTokens!
  logout: Boolean!
  refreshToken: Tokens!
  removeAddress(id: Int!): Address!
  removeDelivery(id: Int!): Delivery!
  removeOrder(id: Int!): Order!
  removeOrderStatus(id: Int!): OrderStatus!
  removePackage(id: Int!): Package!
  removeProduct(id: Int!): Boolean!
  removeRole(removeRoleInput: EditRoleInput!): Boolean!
  removeUser(id: Int!): Boolean!
  updateAddress(updateAddressInput: UpdateAddressInput!): Address!
  updateDelivery(updateDeliveryInput: UpdateDeliveryInput!): Delivery!
  updateOrder(updateOrderInput: UpdateOrderInput!): Order!
  updateOrderStatus(updateOrderStatusInput: UpdateOrderStatusInput!): OrderStatus!
  updatePackage(updatePackageInput: UpdatePackageInput!): Package!
  updateProduct(updateProductInput: UpdateProductInput!): Product!
  updateUser(updateUserInput: UpdateUserInput!): User!
}

type Order {
  canceledAt: DateTime
  comment: String
  createdAt: DateTime!
  deliveredAt: DateTime!
  delivery: Delivery!
  id: ID!
  status: OrderStatus!
  totalPrice: Float!
  updatedAt: DateTime!
  user: User!
}

type OrderStatus {
  createdAt: DateTime!
  description: String!
  id: ID!
  title: String!
  updatedAt: DateTime!
}

type Package {
  createdAt: DateTime!
  id: ID!
  imagePath: String!
  price: Float!
  title: String!
  type: String!
  updatedAt: DateTime!
}

type PaginatedProducts {
  results: [Product!]!
  total: Int!
}

type PaginatedUsers {
  results: [User!]!
  total: Int!
}

input PaginationOptionsInput {
  limit: Float!
  page: Float!
}

type Product {
  category: ProductCategory!
  createdAt: DateTime!
  description: String!
  id: ID!
  imagePath: String!
  price: Float!
  properties: [ProductProperty!]!
  title: String!
  updatedAt: DateTime!
}

type ProductCategory {
  category: String!
  createdAt: DateTime!
  id: ID!
  properties: [ProductPropertyType!]!
  updatedAt: DateTime!
}

type ProductProperty {
  type: ProductPropertyType!
  value: ProductPropertyValue!
}

type ProductPropertyType {
  createdAt: DateTime!
  id: ID!
  title: String!
  updatedAt: DateTime!
}

type ProductPropertyValue {
  createdAt: DateTime!
  description: String
  id: ID!
  title: String!
  updatedAt: DateTime!
}

input PropertyForProductInput {
  propertyDescription: String
  propertyType: String!
  propertyValue: String!
}

type Query {
  address(id: Int!): Address!
  delivery(id: Int!): Delivery!
  order(id: Int!): Order!
  orderStatus(id: Int!): OrderStatus!
  package(id: Int!): Package!
  product(id: Int!): Product!
  productCategories: [ProductCategory!]!
  products(options: EntityQueryInput): PaginatedProducts!
  user(id: Int!): User!
  userRoles(id: Int!): RolesForUser!
  users(options: EntityQueryInput!): PaginatedUsers!
}

type Role {
  createdAt: DateTime!
  description: String!
  id: ID!
  title: UserRoles!
  updatedAt: DateTime!
}

type RolesForUser {
  id: ID!
  roles: [UserRoles!]!
}

input SearchQueryInput {
  q: String!
}

input SortOptionsInput {
  field: String!
  order: SortOrder!
}

enum SortOrder {
  ASC
  DESC
}

type Tokens {
  access_token: String!
  refresh_token: String!
}

input UpdateAddressInput {
  city: String
  country: String
  flatNumber: String
  homeNumber: String
  id: Int!
  postalIndex: String
  street: String
  userId: Float
}

input UpdateDeliveryInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input UpdateOrderInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input UpdateOrderStatusInput {
  description: String
  id: Int!
  title: String
}

input UpdatePackageInput {
  id: ID!
  imagePath: String
  price: Float
  title: String
  type: String
}

input UpdateProductInput {
  category: String
  description: String
  id: Int!
  imagePath: String
  price: Float
  properties: [PropertyForProductInput!]
  title: String
}

input UpdateUserInput {
  email: String
  firstName: String
  id: Int!
  lastName: String
  password: String
  phone: String
}

type User {
  createdAt: DateTime!
  email: String!
  firstName: String!
  id: ID!
  isActivated: Boolean!
  lastName: String
  password: String
  phone: String
  roles: [Role!]!
  updatedAt: DateTime!
}

enum UserRoles {
  ADMIN
  CONTENT_MANAGER
  COURIER
  SALES_MANAGER
}

type UserWithTokens {
  auth: Tokens!
  createdAt: DateTime
  email: String
  firstName: String
  id: ID
  isActivated: Boolean
  lastName: String
  password: String
  phone: String
  roles: [Role!]
  updatedAt: DateTime
}
