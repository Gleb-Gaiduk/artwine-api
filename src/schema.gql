# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AuthUserInput {
  email: String!
  password: String!
}

input CreateRoleInput {
  description: String!
  title: UserRoles!
}

input CreateUserInput {
  email: String!
  firstName: String!
  lastName: String
  password: String!
  phone: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input EditRoleInput {
  roles: [UserRoles!]!
  userId: Float!
}

input FilterInput {
  field: String!
  operation: FilterOperation!
  relationField: String
  values: [String!]!
}

enum FilterOperation {
  EQ
  GE
  GT
  IN
  LE
  LIKE
  LT
  NE
}

enum FilterOperator {
  AND
  OR
}

input FiltersExpressionInput {
  childExpressions: [FiltersExpressionInput!]
  filters: [FilterInput!]
  operator: FilterOperator!
}

type Mutation {
  assignRole(assignRoleInput: EditRoleInput!): RolesForUser!
  createRole(createRoleInput: CreateRoleInput!): Role!
  createUser(createUserInput: CreateUserInput!): UserWithTokens!
  login(authUserInput: AuthUserInput!): UserWithTokens!
  logout: Boolean!
  refreshToken: Tokens!
  removeRole(removeRoleInput: EditRoleInput!): Boolean!
  removeUser(id: Int!): Boolean!
  updateUser(updateUserInput: UpdateUserInput!): User!
}

type PaginatedUsers {
  results: [User!]!
  total: Int!
}

input PaginationOptionsInput {
  limit: Float!
  page: Float!
}

type Query {
  user(id: Int!): User!
  userRoles(id: Int!): RolesForUser!
  users(filters: FiltersExpressionInput, pagination: PaginationOptionsInput, sort: SortOptionsInput): PaginatedUsers!
}

type Role {
  createdAt: DateTime!
  description: String!
  id: ID!
  title: UserRoles!
  updatedAt: DateTime!
}

type RolesForUser {
  id: ID!
  roles: [UserRoles!]!
}

input SortOptionsInput {
  field: String!
  order: SortOrder!
}

enum SortOrder {
  ASC
  DESC
}

type Tokens {
  access_token: String!
  refresh_token: String!
}

input UpdateUserInput {
  email: String
  firstName: String
  id: Int!
  lastName: String
  password: String
  phone: String
}

type User {
  createdAt: DateTime!
  email: String!
  firstName: String!
  id: ID!
  isActivated: Boolean!
  lastName: String
  password: String
  phone: String
  roles: [Role!]!
  updatedAt: DateTime!
}

enum UserRoles {
  ADMIN
  CONTENT_MANAGER
  COURIER
  SALES_MANAGER
}

type UserWithTokens {
  auth: Tokens!
  createdAt: DateTime
  email: String
  firstName: String
  id: ID
  isActivated: Boolean
  lastName: String
  password: String
  phone: String
  roles: [Role!]
  updatedAt: DateTime
}
